'''
Hacer un mongoVolume
docker pull mongo
docker run --name mongo -p 8888:27017 -v mongoVolume:/data/db -d mongo                                          OK  							
docker exec -it mongo bash
mongosh
text>>


neo4j
docker pull neo4j
docker run --publish=7474:7474 --publish=7687:7687 --volume=neo4jVolume:/data -d neo4j                          OK
contraseña alberite   cuando se cambie
http://localhost:7474/browser/
python extension pack           como extensión


Mysql
docker pull mysql
docker run --name mysq -p 3306:3306 -v mysqlVolume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql  OK
mysql -u root -p    para entrar desde exec y a la cmd
Enter password:my-secret-pw

'''










    
'''
MySql


create database dataimport; 

locations.json
    {"id": 201,"name": "TechHub", "city": "Silicon Valley" },
    {"id": 202, "name": "Finance Plaza","city": "New York"},
    {"id": 203,  "name": "Manufacturing Park", "city": "Detroit" },
    {"id": 204, "name": "Health Hub", "city": "Boston"},
    {"id": 205, "name": "Consulting Center", "city": "Chicago" },

create table location(
id_location INT AUTO_INCREMENT PRIMARY KEY,
name nvarchar (10) not null,
city nvarchar(50) not null
); 

ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;  
   
   
   
   
skill.json
    {"id": 301,"name": "Software Development" },
    { "id": 302,  "name": "Financial Analysis" },
    { "id": 303, "name": "Product Design" },
    { "id": 304, "name": "Medical Research"},
    {"id": 305, "name": "Consulting"},  
    
create table skill(
    id_skill INT AUTO_INCREMENT PRIMARY KEY,
    name nvarchar (10) not null
);
ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;  
   

personSkill.json
    {"person_id": 1,"skill_id": 301, "proficiency": "Intermediate"},
    {"person_id": 1,"skill_id": 303, "proficiency": "Advanced"},
    {"person_id": 1, "skill_id": 305,"proficiency": "Beginner"},
    {"person_id": 2,"skill_id": 306, "proficiency": "Intermediate"},
    {"person_id": 5, "skill_id": 309,"proficiency": "Beginner"},
   
create table has_skill(
    id_has_skill INT AUTO_INCREMENT PRIMARY KEY,
    id_person int not null,
    id_skill int not null,
    proficiency nvarchar (30) not null
);

ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;  

'''





'''
Las personas se encuentran en un persons.csv
id,name,age
1,Alice,30
2,Bob,28
3,Charlie,35
4,David,42
5,Eve,25

works_at
person_id,company_id,role,location_id
1,101,Engineer,205
2,102,Manager,207
3,103,Designer,206
4,104,Researcher,206
5,105,Consultant,206'''







import csv
import os


filename="persons.csv"

# Function to create a new CSV file with sample data
def create_csv_file(filename):
    data = [
        ["Name", "Age", "City"],
        ["Alice", 30, "New York"],
        ["Bob", 25, "Los Angeles"],
        ["Charlie", 35, "Chicago"],
    ]

    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(data)

    print(f"Created {filename}")

# Function to read and display the content of a CSV file
def read_csv_file(filename):
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            print(row)

# Function to modify a CSV file by adding a new row
def modify_csv_file(filename, new_data):
    with open(filename, 'a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(new_data)
    print(f"Modified {filename} by adding a new row")

# Function to delete a CSV file
def delete_csv_file(filename):
    if os.path.exists(filename):
        os.remove(filename)
        print(f"Deleted {filename}")
    else:
        print(f"{filename} does not exist.")

# Function to override a CSV file with new data
def override_csv_file(filename, new_data):
    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(new_data)
    print(f"Overridden {filename} with new data")

# Usage examples
create_csv_file("sample.csv")
read_csv_file("sample.csv")
modify_csv_file("sample.csv", ["David", 28, "Houston"])
read_csv_file("sample.csv")
override_csv_file("sample.csv", [["Eve", 40, "San Francisco"]])
read_csv_file("sample.csv")
delete_csv_file("sample.csv")



















# Lecturas de los  csv Neo4j
# Function to read and display the content of a CSV file

import csv
import os

def read_csv_file(filename):
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            print(row)
            
#C:\Users\Vespertino\data_import_adrian\resources\Data_Neo4j
filename="./resources/Data_Neo4j/persons.csv"
read_csv_file(filename)

# Function to read and display the content of a CSV file
def read_csv_file(filename):
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            print(row)
            
#C:\Users\Vespertino\data_import_adrian\resources\Data_Neo4j
filename="./resources/Data_Neo4j/companies.csv"
read_csv_file(filename)


# Function to read and display the content of a CSV file
def read_csv_file(filename):
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            print(row)
            
#C:\Users\Vespertino\data_import_adrian\resources\Data_Neo4j
filename="./resources/Data_Neo4j/works_at.csv"
read_csv_file(filename)







# Lecturas de los jsons MySql
import json

# Function to read and return data from a JSON file
def read_json_file(filename):
    try:
        with open(filename, 'r') as file:
            data = json.load(file)
            return data
    except FileNotFoundError:
        return None
    
filename = "./resources/Data_MySql/locations.json"
read_data = read_json_file(filename)
print('Data from the file: ')
print(read_data)
'''
'''
# Lecturas de los jsons
import json


# Function to read and return data from a JSON file
def read_json_file(filename):
    try:
        with open(filename, 'r') as file:
            data = json.load(file)
            return data
    except FileNotFoundError:
        return None
    
filename = "./resources/Data_MySql/personSkill.json"
read_data = read_json_file(filename)
print('Data from the file: ')
print(read_data)



# Lecturas de los jsons
import json


# Function to read and return data from a JSON file
def read_json_file(filename):
    try:
        with open(filename, 'r') as file:
            data = json.load(file)
            return data
    except FileNotFoundError:
        return None
    
    
filename = "./resources/Data_MySql/skills.json"
read_data = read_json_file(filename)
print('Data from the file: ')
print(read_data)








import csv
import os





'''
def read_csv_file(filename):
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            print(row)
            
#C:\Users\Vespertino\data_import_adrian\resources\Data_Neo4j
filename="./resources/MongoDB/projects.csv"
read_csv_file(filename)


def read_csv_file(filename):
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            print(row)
            
#C:\Users\Vespertino\data_import_adrian\resources\Data_Neo4j
filename="./resources/MongoDB/teams.csv"
read_csv_file(filename)
'''

def read_csv_file(filename):
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            print(row)
            
#C:\Users\Vespertino\data_import_adrian\resources\Data_Neo4j
filename="./resources/MongoDB/works_in_team.csv"
read_csv_file(filename)