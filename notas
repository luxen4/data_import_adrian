'''
Hacer un mongoVolume
docker pull mongo
docker run --name mongo -p 8888:27017 -v mongoVolume:/data/db -d mongo                                          OK  							
docker exec -it mongo bash
mongosh
text>>


neo4j
docker pull neo4j
docker run --publish=7474:7474 --publish=7687:7687 --volume=neo4jVolume:/data -d neo4j                          OK
contrase침a alberite   cuando se cambie
http://localhost:7474/browser/
python extension pack           como extensi칩n


Mysql
docker pull mysql
docker run --name mysq -p 8888:3306 -v mysqlVolume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql  OK
mysql -u root -p    para entrar desde exec y a la cmd
Enter password:my-secret-pw

'''

docker run --name mysq -e MYSQL_ROOT_PASSWORD=my-secret-pw -d -p 8888:3306 -v mysqlVolume:/var/lib/mysql mysql  OK en el video
docker ps







    
'''
MySql


create database dataimport; 

locations.json
    {"id": 201,"name": "TechHub", "city": "Silicon Valley" },
    {"id": 202, "name": "Finance Plaza","city": "New York"},
    {"id": 203,  "name": "Manufacturing Park", "city": "Detroit" },
    {"id": 204, "name": "Health Hub", "city": "Boston"},
    {"id": 205, "name": "Consulting Center", "city": "Chicago" },

create table location(
id_location INT AUTO_INCREMENT PRIMARY KEY,
name nvarchar (50) not null,
city nvarchar(50) not null
); 

ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;  
   


   
   
   
skill.json
    {"id": 301,"name": "Software Development" },
    { "id": 302,  "name": "Financial Analysis" },
    { "id": 303, "name": "Product Design" },
    { "id": 304, "name": "Medical Research"},
    {"id": 305, "name": "Consulting"},  
    
create table skill(
    id_skill INT AUTO_INCREMENT PRIMARY KEY,
    name nvarchar (30) not null
);
ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;  
   

personSkill.json
    {"person_id": 1,"skill_id": 301, "proficiency": "Intermediate"},
    {"person_id": 1,"skill_id": 303, "proficiency": "Advanced"},
    {"person_id": 1, "skill_id": 305,"proficiency": "Beginner"},
    {"person_id": 2,"skill_id": 306, "proficiency": "Intermediate"},
    {"person_id": 5, "skill_id": 309,"proficiency": "Beginner"},
   
   
create table person_skill(
    id_person_skill INT AUTO_INCREMENT PRIMARY KEY,
    id_person int not null,
    id_skill int not null,
    proficiency nvarchar (40) not null,

    foreign key (id_skill) references skill(id_skill) on update cascade on delete cascade
);

ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;  

'''

#{"person_id": 1,"skill_id": 301, "proficiency": "Intermediate"},
skill = Skill("proficiencyaa")
#obj.insert_data3(skill)




'''
Las personas se encuentran en un persons.csv
id,name,age
1,Alice,30
2,Bob,28
3,Charlie,35
4,David,42
5,Eve,25

works_at
person_id,company_id,role,location_id
1,101,Engineer,205
2,102,Manager,207
3,103,Designer,206
4,104,Researcher,206
5,105,Consultant,206'''



Ver los nodos cargados:     match(cc:Companies) return cc           match(pp:Persons) return pp              match(ww:Work_at) return ww
Borrar nodos                MATCH (cc:Companies) DETACH DELETE e



// Eliminar relaciones
MATCH (n:Persona {id: 1})-[r:AMIGO_DE]->(m:Persona {id: 2}) DELETE r // Identifica la relaci칩n
MATCH (n:Persons)-[r:TRABAJA]->(c:Companies)  DELETE r // Elimina las relaciones

MATCH (ww:Works_at)  DELETE ww  OK



MATCH (p:Persons)-[:TRABAJA]->(c:Companies)
RETURN *, p.name, c.name




MATCH (b:Busines),(r:Review)
WHERE b.business_id = r.business_id
CREATE (b)-[:TIENE]->(r)
















  '''
print(" Inserci칩n de works_at")
filename = "./resources/Data_Neo4j/works_at.csv"
with open(filename, 'r') as file:
    reader = csv.reader(file)
    for row in reader:
        print(row)
        person_id=row[0]
        company_id=row[1]
        role=row[2]
        location_id=row[3]
        
        # Example: Create a node
        node_properties = {"person_id":person_id, "company_id":company_id, "role":role, "location_id":location_id }
        created_node = neo4j_crud.create_node("Works_at", node_properties)
        print(f"Created Node: {created_node}")'''